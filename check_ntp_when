#!/bin/bash
#
# Check how recently a host was in contact with its peers
#

# Example why:
#
# root@monitor02.eqx ~ # ntpq -p esxi06
#     remote           refid      st t when poll reach   delay   offset  jitter
#     ==============================================================================
#     *cns01.eqx.reale 10.69.0.200      4 u 189d 1024  377    0.174   -0.140   0.100
#
# NOTE that some hosts can go up to 1024 seconds per poll when
# they get really confident about their local ticker.
#
# By default, we look at the REACH of the host in question and set WARN to
# be $REACH + 64, and CRIT to be REACH + 256
#

NTPQ=$( type -fP ntpq )
TMPFILE=$( mktemp )
ERRFILE=$( mktemp )

cleanup () {
    rm -f $TMPFILE $ERRFILE
}

trap cleanup EXIT

WARN=64
CRIT=256

while getopts "H:w:c:n" opt; do
	case $opt in 
		H)	HOST=$OPTARG ;;
		w)	WARN=$OPTARG ;;
		c)	CRIT=$OPTARG ;;
		n)	NUMERIC="-n " ;;
		\?)	echo "Invalid option $OPTARG" ; exit 1 ;;
		:)	echo "Option -$OPTARG requires an argument" ; exit 1 ;;
		*)	echo "Unknown argument" ; exit 1 ;;
	esac
done

if [ -z "$HOST" ]; then
	echo "ERROR: Missing -H <HOST> argument"
	exit 3
fi

critical=false
warning=false

# check the host 
$NTPQ $NUMERIC -p $HOST 2>$ERRFILE \
    | awk '/^====/,EOF { getline; f=1 } { if (f) { print $1, $5, $6 } }' \
    | while read peer when poll; do
	case $when in 
		*d)	SEC=$(( $( echo $when | sed -e 's/d$//' ) * 86400 )) ;;
		[0-9]*)	SEC=$when ;;
		*)	echo "UNKNOWN: Do not understand when of $when" ; exit 3 ;;

	esac
    if [[ $SEC -gt $(( $poll + $CRIT )) ]]; then
		echo "CRITICAL: WHEN of $SEC GREATER THAN $(( $poll + $CRIT )) FOR PEER $peer"
    elif [[ $SEC -gt $(( $poll + $WARN )) ]]; then
		echo "WARNING: WHEN of $SEC GREATER THAN $(( $poll + $WARN )) FOR PEER $peer"
    else
        echo "OK: NTP has polled $peer recently enough"
	fi
done > $TMPFILE

if grep CRITICAL: $TMPFILE; then
	exit 2
elif grep WARNING: $TMPFILE; then
	exit 1
elif grep -q OK: $TMPFILE; then
	echo "OK: NTP has polled recently enough"
    exit 0
else
    echo "UNKNOWN: Problems polling $HOST: $( echo $( cat $ERRFILE ) )"
    exit 3
fi

# :vim:ts=4 sw=4 expandtab ai
