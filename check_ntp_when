#!/bin/bash
#
# Check how recently a host was in contact with its peers
#

# Example why:
#
# root@monitor02.eqx ~ # ntpq -p esxi06
#     remote           refid      st t when poll reach   delay   offset  jitter
#     ==============================================================================
#     *foo.bar.com     10.10.10.10      4 u 189d 1024  377    0.174   -0.140   0.100
#
# NOTE that some hosts can go up to 1024 seconds per poll when
# they get really confident about their local ticker.
#
# By default, we look at the REACH of the host in question and set WARN to
# be $REACH + 64, and CRIT to be REACH + 256
#

NTPQ=$( type -fP ntpq )
TMPFILE=$( mktemp )
ERRFILE=$( mktemp )
PROG=$( basename $0 )

# Defaults
WARN=64
CRIT=256
DEBUG=false
NOPEER_IS_CRIT=false

cleanup () {
    $DEBUG && cat $DEBUGFILE
    rm -f $TMPFILE $ERRFILE $DEBUGFILE
}

trap cleanup EXIT

usage () {
    cat <<EoUsage
Usage: $PROG -H <host> [-w warn] [-c crit] [-n] [-d]"
    -H <host>       Host to check
    -w warn         seconds of lag behind poll to accept before WARNING
    -c crit         seconds of lag behind poll to accept before CRITICAL
    -n              do not reverse lookup IP addresses via DNS
    -d              debug
    -x              No valid peers available is CRITICAL
    -h              this message
EoUsage
    exit 0
}

dbg () {
    $DEBUG && echo "DEBUG: $1" >> $DEBUGFILE
}

while getopts "H:w:c:ndhx" opt; do
	case $opt in 
		H)	HOST=$OPTARG ;;
		w)	WARN=$OPTARG ;;
		c)	CRIT=$OPTARG ;;
		n)	NUMERIC="-n " ;;
        d)  DEBUG=true ;;
        x)  NOPEER_IS_CRIT=true ;;
        h)  usage ;;
		\?)	echo "Invalid option $OPTARG" ; exit 1 ;;
		:)	echo "Option -$OPTARG requires an argument" ; exit 1 ;;
		*)	echo "Unknown argument" ; exit 1 ;;
	esac
done

if $DEBUG; then
    DEBUGFILE=$( mktemp )
fi

if [ -z "$HOST" ]; then
	echo "ERROR: Missing -H <HOST> argument"
	exit 3
fi

critical=false
warning=false

# check the host 
$NTPQ $NUMERIC -p $HOST 2>$ERRFILE \
    | awk '/^====/,EOF { getline; f=1 } { if (f) { print $1, $5, $6 } }' \
    | while read peer when poll; do
    PEER_STATUS=$( echo $peer | cut -c1 )
    case $PEER_STATUS in
        x)  # peer is discarded by intersection
            dbg "Discarded $peer due to intersection"
            continue ;;
        .)  # peer discarded by table overflow (unused apparently)
            dbg "Discarded $peer due to table overflow"
            continue ;;
        -)  # peer discarded by cluster algorithm
            dbg "Discarded $peer by cluster algorithm"
            continue ;;
        +)  # peer included by the combine algorithm
            dbg "Including $peer by combine algorithm"
            peer=$( echo $peer | cut -c2- ) ;;
        \#) # peer is a backup (more than maxclock sources)
            dbg "Including $peer as a backup"
            continue ;;
        \*) # peer is the chosen system peer
            dbg "Including $peer as chosen system peer"
            peer=$( echo $peer | cut -c2- ) ;;
        o)  # PPS peer
            dbg "Including $peer as PPS peer"
            peer=$( echo $peer | cut -c2- ) ;;
        *)  # unknown
            dbg "Don't know what to do with $peer"
            continue ;;
    esac

	case $when in
		*d)	dbg "Matched when of days to $when for peer $peer"
            SEC=$(( $( echo $when | sed -e 's/d$//' ) * 86400 ))
            ;;
		[0-9]*)
            dbg "Matched when of seconds to $when for peer $peer"
            SEC=$when
            ;;
		*)	dbg "Unknown when of $when for peer $peer"
            echo "UNKNOWN: Do not understand when of $when"
            exit 3
            ;;
	esac

    if [[ $SEC -gt $(( $poll + $CRIT )) ]]; then
		echo "CRITICAL: when of $SEC seconds > $(( $poll + $CRIT )) seconds for peer $peer"
    elif [[ $SEC -gt $(( $poll + $WARN )) ]]; then
		echo "WARNING: when of $SEC seconds > $(( $poll + $WARN )) for peer $peer"
    else
        echo "OK: NTP has polled $peer recently enough ($SEC seconds)"
	fi
done > $TMPFILE

if grep CRITICAL: $TMPFILE; then
	exit 2
elif grep WARNING: $TMPFILE; then
	exit 1
elif grep -q OK: $TMPFILE; then
	echo "OK: NTP has polled recently enough"
    exit 0
elif [ $( wc -l $TMPFILE | awk '{ print $1 }' ) -eq 0 ]; then
    if $NOPEER_IS_CRIT; then
        echo "CRITICAL: Host has no valid peers"
        exit 2
    else
        echo "UNKNOWN: Host has no valid peers"
        exit 3
    fi
else
    echo "UNKNOWN: Problems polling $HOST: $( echo $( cat $ERRFILE ) )"
    exit 3
fi

# :vim:ts=4 sw=4 expandtab ai
